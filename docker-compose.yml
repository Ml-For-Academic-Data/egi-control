version: '3.8'


networks:
  internal_network:
    driver: bridge

services:
  airflow:
  # En caso de falta de contraseña (ver al iniciar sesión en la pagina autohosteada) abrir terminal de contenedor airflow, abrir archivo config y buscar "password": docker ps, docker exec -it <nombre_del_contenedor> bash, /opt/airflow/airflow.cfg, cat /opt/airflow/airflow.cfg
  
    # build:
    #   context: ./airflow-w-sklearn    # <-- Aquí apunta al Dockerfile de la carpeta dedicada
    # image: apache/airflow:2.9.2
    image: matiascollado/airflow-w-sklearn:v1.0
    # image: airflow-w-sklearn
    container_name: airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor #No apto para producción
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__FERNET__KEY=D_b7-k2tJcEmrfAPASL8V_cY03LJd-uWWtJ-8HN1Esk=
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      # usuario por defecto
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      # # para que todas las carpetas de src/ sean importables
      # - PYTHONPATH=/opt/airflow/src

    volumes: #Los volumenes de airflow los tiene este repo. /data se busca en el repo control
      - ../egi-backend/dags:/opt/airflow/dags
      - ../egi-backend/src:/opt/airflow/src
      - ./data:/opt/airflow/data
      - ../egi-backend/volumes/airflow:/opt/airflow
    
    ports:
      - "8080:8080"
    # command: standalone
    command: >
      bash -c "airflow db init &&
                airflow webserver"


  airflow-scheduler:
    # build:
    #   context: ./airflow-w-sklearn    # <-- Aquí apunta al Dockerfile de la carpeta dedicada
    image: matiascollado/airflow-w-sklearn:v1.0
    # image: airflow-w-sklearn
    container_name: airflow-scheduler
    command: airflow scheduler 
    depends_on:
      - airflow
    volumes: #Los volumenes de airflow los tiene este repo. /data se busca en el repo control
      - ../egi-backend/dags:/opt/airflow/dags
      - ../egi-backend/src:/opt/airflow/src
      - ./data:/opt/airflow/data
      - ../egi-backend/volumes/airflow:/opt/airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor


  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=h2
    volumes:
      - ./volumes/keycloak:/opt/keycloak/data
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports:
      - "8081:8080"
    command:
      - start-dev
      - --import-realm


  oauth2-proxy:
    image: bitnami/oauth2-proxy:latest
    container_name: oauth2-proxy
    environment:
      - OAUTH2_PROXY_CLIENT_ID=frontend-client
      - OAUTH2_PROXY_CLIENT_SECRET=ZUA1nSULKbOUVSczgFnlN4kKwK7m9YaV
      - OAUTH2_PROXY_COOKIE_SECRET=abcdef1234567890abcdef1234567890
      - OAUTH2_PROXY_PROVIDER=oidc
      - OAUTH2_PROXY_OIDC_ISSUER_URL=http://keycloak:8080/realms/ML
      - OAUTH2_PROXY_EMAIL_DOMAINS=*
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:4180
      - OAUTH2_PROXY_UPSTREAM=http://panel-app:5000/panel/, http://frontend:3000/frontend/
      - OAUTH2_PROXY_REDIRECT_URL=http://localhost:4180/oauth2/callback
    ports:
     - "4180:4180"


  mysql-server:
    image: mysql:8.0
    container_name: mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: students
      MYSQL_USER: user
      MYSQL_PASSWORD: 1234
    ports:
      - "3306:3306" # Opcional: solo si necesitas acceder desde fuera del contenedor
    volumes:
      - .volumes/mysql_data:/var/lib/mysql
      - .volumes/mysql_data/init.sql:/docker-entrypoint-initdb.d/init.sql  # script inicial (opcional)
    networks:
      - internal_network

  panel-app:
    # build:
    #   context: ./visualization
    image: matiascollado/frontend-panel-app:v1.0
    container_name: panel-app
    ports:
      - "5000:5000"
    volumes:
      - ./data:/opt/airflow/data  # Compartimos los datos con la app
      - ../egi-frontend/visualization:/app  # Compartimos la app con el contenedor

  # frontend:
  #   build:
  #     context: ../frontend
  #   container_name: frontend-app
  #   # ports:
  #   #   - "3000:3000"
  #   networks:
  #     - internal_network
  #   environment:
  #   - FLASK_ENV=development
  #   volumes:
  #   - ./frontend:/app
  #   depends_on:
  #     - keycloak
